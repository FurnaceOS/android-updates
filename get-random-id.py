#!/bin/python3
import random
import string
import sys
import json
import datetime
import os

def generate_random_id(length=32):
    """
    Generates a random ID of a specified length using lowercase letters and numbers.
    """
    allowed_chars = string.ascii_lowercase + string.digits
    return ''.join(random.choice(allowed_chars) for _ in range(length))

def generate_json(id):
    """
    Generates a JSON object for an update based on user input.
    """
    print("Generating json...")
    print("Please provide the following information:")
    print("The datetime (Autogenerated) attribute is the build date expressed as UNIX timestamp.")
    print("The filename attribute is the name of the file to be downloaded.")
    print("The id (Autogenerated) attribute is a string that uniquely identifies the update.")
    print("The romtype attribute is the string to be compared with the ro.lineage.releasetype property.")
    print("The size (Autogenerated, if url is filepath in repo.) attribute is the size of the update expressed in bytes.")
    print("The url (can be a filepath in this repo.)attribute is the URL of the file to be downloaded.")
    print("The version attribute is the string to be compared with the ro.lineage.build.version property.")

    filename = input("Filename (update.zip): ")
    valid_romtypes = ["nightly", "stable", "official", "unofficial", "release", "testing", "debug", "weekly", "snapshot", "beta", "userdebug", "eng"]
    while True:
        romtype = input("romtype (nightly, press enter for this.): ").lower()
        if romtype in valid_romtypes or romtype == "":
            if romtype == "":romtype = "nightly"
            break
        else:
            print("Invalid romtype. Please choose from: " + ", ".join(valid_romtypes))

    url = input("url (Or put location in this repo.): ").lower()
    if url.startswith("https://") or url.startswith("http://"):
        print("URL detected.")
        url = url.lower()

        size = input("Size of update file: ")

        if any(char.isalpha() for char in size):
            print("Size cannot contain letters. Please put just bytes.")
            sys.exit(1)
    else:
        print("File location detected.")
        file_path = url
        if file_path.startswith("/") or file_path.startswith("./"):
            print(f"Please put the filepath, like starlte/update.zip, not something like /mnt... or ./... ({file_path})")
            sys.exit(1)
        local_file_path = file_path
        if not os.path.exists(local_file_path):
            print(f"Error: File {local_file_path} does not exist.")
            sys.exit(1)
        if os.path.isdir(local_file_path):
            print("This is a directory.")
            sys.exit(1)
        size = os.path.getsize(local_file_path)
        url = "https://raw.githubusercontent.com/FurnaceOS/android-updates/refs/heads/main/" + file_path

    ver = input("Version (22, press enter for this): ")
    if ver == "": ver = "22"

    update_details = {
        "response": [
            {
                "datetime": int(datetime.datetime.now().timestamp()),
                "filename": f"{file_path}",
                "id": id,
                "romtype": f"{romtype}",
                "size": size,
                "url": f"{url}",
                "version": f"{ver}"
            }
        ]
    }

    update_json = json.dumps(update_details, indent=4)
    print("json:\n" + update_json)

if __name__ == "__main__":
    id = generate_random_id()
    print("Random ID: " + id)
    if input("Do you want to generate a json? (yes/no): ").lower() == "yes":
        generate_json(id)
    sys.exit(0)
